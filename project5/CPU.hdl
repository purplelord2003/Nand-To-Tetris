// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // A register
    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=Ainput);

    // Checking if A instruction before loading or if C instruction with destination to A register
    Not(in=instruction[15], out=Ainst);
    And(a=instruction[5], b=instruction[15], out=Cinst);
    Or(a=Ainst, b=Cinst, out=Aload);

    ARegister(in=Ainput, load=Aload, out=Aoutput, out[0..14]=addressM, out=pctemp1);

    Mux16(a=Aoutput, b=inM, sel=instruction[12], out=ALUinput2);

    // D register
    // Load D register when there is C instruction with destination to D register
    And(a=instruction[4], b=instruction[15], out=Dload);
    DRegister(in=ALUoutput, load=Dload, out=ALUinput1);

    // ALU
    ALU(x=ALUinput1, y=ALUinput2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUoutput, zr=zero, ng=negative);
    // Write to M register when there is C instruction with destination to M register
    And(a=instruction[3], b=instruction[15], out=writeM);

    // PC
    Not(in=zero, out=notzr);
    Not(in=negative, out=notng);

    // j3 and not zr and not ng
    And(a=instruction[0], b=notzr, out=pctemp2);
    And(a=pctemp2, b=notng, out=pctemp3);

    // j2 and zr
    And(a=instruction[1], b=zero, out=pctemp4);

    // j1 and ng
    And(a=instruction[2], b=negative, out=pctemp5);

    // 3 way Or
    Or(a=pctemp3, b=pctemp4, out=pctemp6);
    Or(a=pctemp6, b=pctemp5, out=pctemp7);

    // check if the instruction is C for jump
    And(a=instruction[15], b=pctemp7, out=pcload);
    PC(in=pctemp1, load=pcload, inc=true, reset=reset, out[0..14]=pc);
}